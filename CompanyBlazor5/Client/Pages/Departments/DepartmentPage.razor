@page "/departments"

<PageTitle>Departments</PageTitle>

@inject IDepartmentService departmentService
@inject NavigationManager navigationManager

@if (departments != null && mainLayout.LoggedIn)
{
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Department" Click="@InsertRow" Disabled=@(dpToInsert != null || dpToUpdate != null) />
    <RadzenDataGrid style="--rz-grid-header-background-color: gray;"  @ref="departmentGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@departments" TItem="Department" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
    <Columns>

        <RadzenDataGridColumn TItem="Department" Property="departmentName" Title="Name" Width="280px">
            <EditTemplate Context="rowDepartment">
                <RadzenTextBox @bind-Value="rowDepartment.departmentName" Style="width:100%; display: block" Name="Name" />
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Department" Property="departmentLocation" Title="Location" Width="220px">
            <EditTemplate Context="rowDepartment">
                <RadzenTextBox @bind-Value="rowDepartment.departmentLocation" Style="width:100%; display: block" Name="Location" />
                <RadzenRequiredValidator Text="Location is required" Component="Location" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Department" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="rowDepartment">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(rowDepartment))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(rowDepartment))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="rowDepartment">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(rowDepartment))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(rowDepartment))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(rowDepartment))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
}
else if (!mainLayout.LoggedIn)
{
    <h3>Login pls</h3>
}
else
{
    <h3>Loading...</h3>
}

@code {
    [CascadingParameter]
    public MainLayout mainLayout { get; set; }

    RadzenDataGrid<Department> departmentGrid;
    IEnumerable<Department> departments;

    Department dpToInsert;
    Department dpToUpdate;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await departmentService.getDepartments();
        departments = departmentService.departments;
    }

    void Reset(){
        dpToInsert = null;
        dpToUpdate = null;
    }

    async Task updateDepartments(){
        await departmentService.getDepartments();
        departments = departmentService.departments;
    }

    async Task EditRow(Department dp){
        dpToUpdate = dp;
        await departmentGrid.EditRow(dp);

        var dp2 = await departmentService.getDepartment(4);

    }

    async Task OnUpdateRow(Department dp){
        dpToInsert = dp==dpToInsert ? null : dpToInsert;
        dpToUpdate = null;

        await departmentService.UpdateDepartment(dp);
        await updateDepartments();
    }

    async Task SaveRow(Department dp){
        if (ValidateDepartment(dp))
        {
            await departmentGrid.UpdateRow(dp);
            await updateDepartments();
        }
    }

    async Task CancelEdit(Department dp){
        dpToInsert = dp==dpToInsert ? null : dpToInsert;
        dpToUpdate = null;

        departmentGrid.CancelEditRow(dp);
    }

    async Task DeleteRow(Department dp){
        dpToInsert = dp==dpToInsert?null:dpToInsert;
        dpToUpdate = dp == dpToUpdate ? null : dpToUpdate;

        if (await departmentService.getDepartment(dp.departmentNo) != null)
        {
            await departmentService.DeleteDepartment(dp.departmentNo);
            await departmentGrid.Reload();
            await updateDepartments();
        }
        else{
            departmentGrid.CancelEditRow(dp);
            await departmentGrid.Reload();
        }

    }

    async Task InsertRow(){
        dpToInsert = new Department();
        await departmentGrid.InsertRow(dpToInsert);
    }

    async Task OnCreateRow(Department dp){
        await departmentService.CreateDepartment(dp);
        await updateDepartments();
        dpToInsert = null;
    }

    bool ValidateDepartment(Department dp)
    {
        if (string.IsNullOrEmpty(dp.departmentName)) return false;
        if (string.IsNullOrEmpty(dp.departmentLocation)) return false;

        return true;
    }
}