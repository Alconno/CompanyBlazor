@page "/register"
@using CompanyBlazor5.Server.Encryption
@using CompanyBlazor5.Shared
@using System.Diagnostics
@inject HttpClient Http
@inject NavigationManager nav


<h3 class="my-3">Registration</h3>

<form @onsubmit="() => SubmitRegisterForm(reg)">
	<div class="mb-3">
		<p>Enter your information.</p>
	</div>
	<div class="mb-3">
		<label for="email" class="form-label">Name</label>
		<input type="text" class="form-control" id="email"  autocomplete="off" required @bind-value="reg.Name" @onkeypress="() => message = null" />
	</div>
	<div class="mb-3">
		<label for="pwd1" class="form-label">Password</label>
		<input type="password" class="form-control" id="pwd1" required @bind-value="reg.Password" @onkeypress="() => message = null" />
	</div>
	<div class="mb-3">
		<label for="pwd2" class="form-label">Confirm Password</label>
		<input type="password" class="form-control" id="pwd2" required @bind-value="confirmpwd" @onkeypress="() => message = null" />
	</div>
	<button type="submit" class="btn btn-primary" disabled="@disableBtn">Submit</button>
</form>

<a href="" @onclick="@GoogleLogin" @onclick:preventDefault>Register over Google</a>

<div class="my-3 alert alert-@alertType @(string.IsNullOrWhiteSpace(message) ? "d-none" : "")" role="alert">@message</div>

@code {
	[CascadingParameter]
	public MainLayout mainLayout { get; set; }

	string alertType, message;
	bool disableBtn;

	RegisterAccount reg = new RegisterAccount();
	string confirmpwd;

	[Parameter]
	[SupplyParameterFromQuery]
	public string? Name { get; set; }
	[Parameter]
	[SupplyParameterFromQuery]
	public string? Password { get; set; }

	private async Task<bool> SubmitRegisterForm(RegisterAccount regAcc)
	{
		if (regAcc.Password.Length < 8)
		{
			alertType = "danger";
			message = "Passwords must be at least 8 characters.";
		}
		else if (regAcc.Password != confirmpwd)
		{
			reg.Password = null;
			confirmpwd = null;
			alertType = "danger";
			message = "Passwords do not match. Please try again.";
		}
		else
		{
			disableBtn = true;
			using (var msg = await Http.PostAsJsonAsync<RegisterAccount>("/api/user/register", regAcc, System.Threading.CancellationToken.None))
			{
				if (msg.IsSuccessStatusCode)
				{
					RegisterResult result = await msg.Content.ReadFromJsonAsync<RegisterResult>();
					if (result.Success)
					{
						alertType = "success";
						message = $"You have been registered. Login using your password and the name {regAcc.Name}.";
						reg.Clear();
						confirmpwd = null;
						nav.NavigateTo("/account");
					}
					else
					{
						alertType = "danger";
						message = result.Message + " Try again with different values.";
					}

				}
				disableBtn = false;
			}

		}
		return false;
	}

	private async Task GoogleLogin()
	{
		nav.NavigateTo("/api/user/googleAuth?reqMadeFrom=register", true);
	}

	protected override async Task OnInitializedAsync()
	{
		if (!string.IsNullOrEmpty(Name) && !string.IsNullOrEmpty(Password)) // registration set through parameters
		{
			Password = new Encrypt().BurrowDecode(Password);
			confirmpwd = Password;
			bool registrationResult = await SubmitRegisterForm(new RegisterAccount { Name = Name, Password = Password });
			Name = Password = null;
		}

		await base.OnInitializedAsync();
	}
}